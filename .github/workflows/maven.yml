name: Maven Build

on:
  push:
    branches: [ "main", "scenario/*", "eval/*", "feature/*" ]
  pull_request:
    branches: [ "main", "scenario/*", "eval/*", "feature/*" ]

jobs:
  build:
    runs-on: ubuntu-latest

    # NEW â€“ allow the workflow-token to write issue comments
    permissions:
      issues: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: 24
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B compile --file pom.xml

      - name: Extract test names from PR body
        id: extract_tests
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"

          FAIL_TO_PASS=$(echo "$PR_BODY" | grep -E '^FAIL_TO_PASS:' | cut -d':' -f2- | xargs)
          PASS_TO_PASS=$(echo "$PR_BODY" | grep -E '^PASS_TO_PASS:' | cut -d':' -f2- | xargs)

          TESTS="$FAIL_TO_PASS,$PASS_TO_PASS"
          TESTS=$(echo "$TESTS" | sed 's/^[,]*//;s/[,]*$//')

          echo "tests=$TESTS" >> $GITHUB_OUTPUT

      - name: Show tests to run
        run: |
          echo "Running tests: ${{ steps.extract_tests.outputs.tests }}"

      - name: Run Maven tests
        if: ${{ steps.extract_tests.outputs.tests != '' }}
        run: mvn -B -Dtest="${{ steps.extract_tests.outputs.tests }}" test

      - name: Run All Tests
        if: ${{ steps.extract_tests.outputs.tests == '' }}
        run: mvn -B test --file pom.xml

      # Add a comment to the related issue with build result
      - name: Comment build status to linked issue
        if: always()
        uses: actions/github-script@v7
        env:
          WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          JOB_STATUS: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |          
            const ctx    = context;                   // action context
            const gh     = github;                    // REST client
            const issuePat = /#(\d+)/g;
            let issueNum  = null;
            let m;

            // Try to detect an issue from pull-request title/body
            if (ctx.payload.pull_request) {
              const prTxt = `${ctx.payload.pull_request.title}\n${ctx.payload.pull_request.body}`;
              while ((m = issuePat.exec(prTxt)) !== null) {
                issueNum = parseInt(m[1], 10);
                break;
              }
            }

            // Fallback â€“ scan commit messages of this push/PR
            if (!issueNum && ctx.payload.commits) {
              for (const c of ctx.payload.commits) {
                while ((m = issuePat.exec(c.message)) !== null) {
                  issueNum = parseInt(m[1], 10);
                  break;
                }
                if (issueNum) break;
              }
            }

            if (!issueNum) {
              core.info('No issue reference (#123) found â€“ nothing to update.');
              return;
            }

            const body = `ðŸš€ **Build** [${process.env.GITHUB_WORKFLOW}](${process.env.WORKFLOW_URL}) finished with status **${process.env.JOB_STATUS.toUpperCase()}**.`;
            await gh.rest.issues.createComment({
              owner: ctx.repo.owner,
              repo:  ctx.repo.repo,
              issue_number: issueNum,
              body
            });
        # end of github-script step
